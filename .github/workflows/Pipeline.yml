name: Github Actions pipeline testing

on:
  push:
    branches: [ main ]

env:
  REGION: eu-central-1
  STATE_FILES_BUCKET: p81-gilad-state-files-bucket
  PROFILE_NAME: default
  STATEFILE_LOCK_TABLE: p81-gilad-statefile-locks-table
  ACCOUNT_NUMBER: 329082085800
  IAM_USER_NAME: gilad-tayeb
  TASK_BUCKET_NAME: gilad-assignment-jan-2024
  ORIGIN_ID: jsonOrigin

jobs:

  install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'


  pre-requisites:
    needs: install
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Clean existing AWS CLI
      run: |
        sudo rm -rf /usr/local/aws-cli*
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" > /dev/null
        unzip awscliv2.zip > /dev/null
        sudo ./aws/install > /dev/null
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ env.REGION }}
        aws configure set default.output json
    - name: Install dependencies
      run: |
        ls -thal ~/.aws/
        python -m pip install --upgrade pip
        pip install -r ./python/requirements.txt
    - name: Run Python script
      run: |
        python ./python/pre-configurations.py


  terraform_code:
    needs: pre-requisites
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
      - name: Configure AWS CLI
        run: |
          aws configure set --profile default aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set --profile default aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set --profile default default.region ${{ env.REGION }}
          aws configure set --profile default default.output json
      - name: Input env. variables into global.tfvars in order to use them in deployment
        run: |
          cd Terraform
          echo "region = \"$REGION\"" > globals.tfvars
          echo "aws_profile = \"$PROFILE_NAME\"" >> globals.tfvars
          echo "bucket_name = \"$TASK_BUCKET_NAME\"" >> globals.tfvars
          echo "origin_id = \"$ORIGIN_ID\"" >> globals.tfvars
          cat globals.tfvars
          aws configure list
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: true
      - name: Setup Terraform version
        run: terraform --version
      - name: Setup Terraform wrapper path
        run: |
          which terraform
          pwd
      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: 1.5.7
          tg_version: 0.54.21
          tg_dir: /github/workspace/Terraform/
          tg_command: 'apply'
      - name: Interact with Terragrunt
        run: |
          terragrunt --version
          cd ./Terraform
          pwd
          ls -lah
#          terragrunt apply --auto-approve --terragrunt-non-interactive
      - name: Trigger the python code that filters the json file
        run: |
          cd ../python
          python ./python/p81_script.py --region $REGION --bucket $TASK_BUCKET_NAME
          
