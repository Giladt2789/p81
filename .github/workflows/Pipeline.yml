name: Github Actions pipeline testing

on:
#  push:
#    branches: [ main ]
  workflow_dispatch:
    inputs:
      REGION:
        description: 'AWS region to deploy infrastructure'     
        required: true
        default: 'eu-central-1'
      STATE_FILES_BUCKET:
        description: 'The buckets name where the state file would be stored'
        required: true
        default: 'p81-gilad-state-files-bucket'
      PROFILE_NAME:
        description: 'AWS Profile name to be used with AWS/boto3/Terraform API calls'
        required: true
        default: 'default'
      STATEFILE_LOCK_TABLE:
        description: 'The DynamoDB tables name to store the LockID for terraform backend'
        required: true
        default: 'p81-gilad-statefile-locks-table'
      ACCOUNT_NUMBER: 
        description: 'The AWS account number (provided in assignment)'
        required: true
        default: '329082085800'
      IAM_USER_NAME:
        description: 'Username given for assignment for AWS'
        required: true
        default: 'gilad-tayeb'
      TASK_BUCKET_NAME:
        description: 'The bucket where the final parsed json will be stored'
        required: true
        default: 'gilad-assignment-jan-2024'
      ORIGIN_ID:
        description: 'Cloudfront origin id'
        required: true
        default: 'jsonOrigin'
      ACTION:
        description: 'For internal uses, can create/destroy the infrastructure'
        required: false
        
jobs:
  install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    - name: Print input parameter
      run: | 
        echo "The parameters are: ${{ toJSON(github.event.inputs) }}"


  pre-requisites:
    needs: install
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Clean existing AWS CLI
      run: |
        sudo rm -rf /usr/local/aws-cli*
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" > /dev/null
        unzip awscliv2.zip > /dev/null
        sudo ./aws/install > /dev/null
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.REGION }}
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ inputs.REGION }}
        aws configure set default.output json
        which aws 
    - name: Install dependencies
      run: |
        ls -thal ~/.aws/
        python -m pip install --upgrade pip
        pip install -r ./python/requirements.txt
    - name: Run Python script
      run: |
        if [[ "${{  github.event.inputs.ACTION }}" == "create" ]]; then
          python ./python/pre-configurations.py ${{ github.event.inputs.REGION }} ${{ github.event.inputs.STATE_FILES_BUCKET }} ${{ github.event.inputs.PROFILE_NAME }} ${{ github.event.inputs.STATEFILE_LOCK_TABLE }} ${{ github.event.inputs.ACCOUNT_NUMBER }} ${{ github.event.inputs.IAM_USER_NAME }}
        fi

  terraform_code:
    needs: pre-requisites
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ github.event.inputs.REGION }}"
      - name: Configure AWS CLI
        run: |
          aws configure set --profile default aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set --profile default aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set --profile default default.region ${{ github.event.inputs.REGION }}
          aws configure set --profile default default.output json
      - name: Input env. variables into global.tfvars in order to use them in deployment
        run: |
          cd Terraform
          echo 'region = "${{ github.event.inputs.REGION }}"' > globals.tfvars
          echo 'aws_profile = "${{ github.event.inputs.PROFILE }}"' >> globals.tfvars
          echo 'bucket_name = "${{ github.event.inputs.TASK_BUCKET_NAME }}"' >> globals.tfvars
          echo 'origin_id = "${{ github.event.inputs.ORIGIN_ID }}"' >> globals.tfvars
          cat globals.tfvars
      - name: Create AWS config file
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: true
      - name: Setup Terraform version
        run: terraform --version
      - name: Setup Terraform wrapper path
        run: |
          which terraform
          pwd
          which aws
      - name: Pre-assign the terragrunt flag to apply/destroy
        run: |
          if [[ "${{ github.event.inputs.ACTION }}" == "create" ]]; then
            echo "FLAG=apply" >> $GITHUB_ENV
          else
            echo "FLAG=destroy" >> $GITHUB_ENV
          fi
#      - name: If destroy triggered, clean the storage bucket before destroy infrastructure
#        run: |
#          if [[ "${{ github.event.inputs.ACTION }}" == "destroy" ]]; then
#            cd ./python
#            python -m pip install --upgrade pip
#            pip install -r ./requirements.txt
#            python ./p81_script.py --region ${{ github.event.inputs.REGION }} --bucket ${{ github.event.inputs.TASK_BUCKET_NAME }} --destroy ${{ env.FLAG }}
#          fi
      - name: Deploy or remove infrastructure - depenend on the action flag
        uses: gruntwork-io/terragrunt-action@v2
        env:
          STATE_FILES_BUCKET: ${{ github.event.inputs.STATE_FILES_BUCKET }}
          REGION: ${{ github.event.inputs.REGION }}
          STATEFILE_LOCK_TABLE: ${{ github.event.inputs.STATEFILE_LOCK_TABLE }}
        with:
          tf_version: 1.5.7
          tg_version: 0.54.21
          tg_dir: /github/workspace/Terraform/
          tg_command: ${{ env.FLAG }}
      - name: Print cloudfront distribution url
        run: |
          if [[ "${{ github.event.inputs.ACTION }}" == "create" ]]; then
            cd ./Terraform/modules/cloudfront/
            cat cloudfront_domain.txt
          fi
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./python/requirements.txt
      - name: Trigger the python code that filters the json file
        run: |
          if [[ "${{ github.event.inputs.ACTION }}" == "create" ]]; then
            cd ./python
            python ./p81_script.py --region ${{ github.event.inputs.REGION }} --bucket ${{ github.event.inputs.TASK_BUCKET_NAME }}
          fi
      - name: Trigger the post-configurations file to remove state files bucket and dynamodb table
        run: |
          if [[ "${{ github.event.inputs.ACTION }}" == "destroy" ]]; then
            python python/post_configurations.py ${{ github.event.inputs.REGION }} ${{ github.event.inputs.STATE_FILES_BUCKET }} ${{ github.event.inputs.PROFILE_NAME }} ${{ github.event.inputs.STATEFILE_LOCK_TABLE }}
          fi